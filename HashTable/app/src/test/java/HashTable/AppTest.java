/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HashTable;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    //Adding a key/value to your hashtable results in the value being in the data structure
    //Retrieving based on a key returns the value stored
    @Test void addToHashTable() throws Exception{
        HashTableClass hashTableClass = new HashTableClass();
        hashTableClass.HashTable(10);
        hashTableClass.add("abc", "Hello");
        assertEquals("Hello", hashTableClass.get("abc"));
    }

    //Successfully returns null for a key that does not exist in the hashtable
    @Test void returnNull(){
        HashTableClass hashTableClass = new HashTableClass();
        hashTableClass.HashTable(10);
        assertNull(hashTableClass.get("abc"));
    }

    //Successfully hash a key to an in-range value
    @Test void hashTheKey(){
        HashTableClass hashTableClass = new HashTableClass();
        hashTableClass.HashTable(10);
        hashTableClass.Hash("abc");
        assertEquals(4, hashTableClass.Hash("abc"));
    }



    //repeatedWord Tests
    @Test void firstRepeatedWord() throws Exception{
        HashMapClass hashMapClass = new HashMapClass();
        assertEquals("it", hashMapClass.repeatedWord("It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way â€“ in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only"));
    }

    //Throw Exception if the text is empty
    @Test void emptyString() throws Exception{
        HashMapClass hashMapClass = new HashMapClass();
        Assertions.assertThrows(Exception.class, ()->{
            hashMapClass.repeatedWord("");
        });
    }

}
